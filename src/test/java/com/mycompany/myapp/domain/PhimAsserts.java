package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PhimAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhimAllPropertiesEquals(Phim expected, Phim actual) {
        assertPhimAutoGeneratedPropertiesEquals(expected, actual);
        assertPhimAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhimAllUpdatablePropertiesEquals(Phim expected, Phim actual) {
        assertPhimUpdatableFieldsEquals(expected, actual);
        assertPhimUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhimAutoGeneratedPropertiesEquals(Phim expected, Phim actual) {
        assertThat(expected)
            .as("Verify Phim auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhimUpdatableFieldsEquals(Phim expected, Phim actual) {
        assertThat(expected)
            .as("Verify Phim relevant properties")
            .satisfies(e -> assertThat(e.getTenPhim()).as("check tenPhim").isEqualTo(actual.getTenPhim()))
            .satisfies(e -> assertThat(e.getThoiLuong()).as("check thoiLuong").isEqualTo(actual.getThoiLuong()))
            .satisfies(e -> assertThat(e.getGioiThieu()).as("check gioiThieu").isEqualTo(actual.getGioiThieu()))
            .satisfies(e -> assertThat(e.getNgayCongChieu()).as("check ngayCongChieu").isEqualTo(actual.getNgayCongChieu()))
            .satisfies(e -> assertThat(e.getLinkTrailer()).as("check linkTrailer").isEqualTo(actual.getLinkTrailer()))
            .satisfies(e -> assertThat(e.getLogo()).as("check logo").isEqualTo(actual.getLogo()))
            .satisfies(e -> assertThat(e.getLogoContentType()).as("check logo contenty type").isEqualTo(actual.getLogoContentType()))
            .satisfies(e -> assertThat(e.getDoTuoi()).as("check doTuoi").isEqualTo(actual.getDoTuoi()))
            .satisfies(e -> assertThat(e.getTheLoai()).as("check theLoai").isEqualTo(actual.getTheLoai()))
            .satisfies(e -> assertThat(e.getDinhDang()).as("check dinhDang").isEqualTo(actual.getDinhDang()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPhimUpdatableRelationshipsEquals(Phim expected, Phim actual) {}
}
